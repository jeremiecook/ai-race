var F = [function (x, derivate) {
    if (derivate) return -1;
    return 1 - x;
  },function (x, derivate) {
    var alpha = 1.6732632423543772848170429916717;
    var scale = 1.0507009873554804934193349852946;
    var fx = x > 0 ? x : alpha * Math.exp(x) - alpha;
    if (derivate) { return x > 0 ? scale : (fx + alpha) * scale; }
    return fx * scale;
  },function (x, derivate) {
    if (derivate) return 1 - Math.pow(Math.tanh(x), 2);
    return Math.tanh(x);
  },function (x, derivate) {
    if (derivate) return Math.cos(x);
    return Math.sin(x);
  },function (x, derivate) {
    var d = Math.exp(-Math.pow(x, 2));
    if (derivate) return -2 * x * d;
    return d;
  },function (x, derivate) {
    if (derivate) return x > 0 ? 1 : 0;
    return x > 0 ? x : 0;
  },function (x, derivate) {
    return derivate ? 1 : x;
  },function (x, derivate) {
    var d = 1 + Math.abs(x);
    if (derivate) return x / Math.pow(d, 2);
    return x / d;
  },function (x, derivate) {
    var fx = 1 / (1 + Math.exp(-x));
    if (!derivate) return fx;
    return fx * (1 - fx);
  }];
var A = [0.716,0.66925,0.0421691395368744,1.4122553917360399,1.0302432258805723,-0.28971838835943553,0.25484056198729654,-0.9417530848478365,0.9811406596609127,2.2991528932308203,2.7927944472445994,0.4394913632189291,-0.6937579594969636,0.06173438922620672,0.9758547390126168];
var S = [0,0,0,-0.41225539173603987,0.980529416340991,-0.29825882120857994,0.25768281771942864,-0.7671499862324425,-0.13798349806840227,2.2991528932308203,2.7927944472445994,0.4182839537679404,-2.2653909905948564,-2.721191938564301,3.699225613921494];
function activate(input){
for(var i = 0; i < input.length; i++) A[i] = input[i];
S[3] = A[0] * -1.4950497940111531 + 0.6582002607759456;
A[3] = F[0](S[3]);
S[4] = A[1] * -0.7890437001980053 + A[0] * 0.39646739092264266 + 1.224726260797894;
A[4] = F[1](S[4]);
S[5] = A[4] * -0.8714544431308731 + A[2] * 0.3265603935510252 + 0.5857804446876587;
A[5] = F[2](S[5]);
S[6] = A[5] * -0.3548460727466431 + A[1] * -0.18080450174439402 + 0.27588079820003186;
A[6] = F[3](S[6]);
S[7] = A[6] * 1.8266207530091214 + A[0] * -0.07762761083768066 + -1.1770656761071665;
A[7] = F[1](S[7]);
S[8] = A[7] * -0.775695135241268 + A[6] * -2.254825177503057 + A[2] * 2.8624356504752857 + -0.4145823175255575;
A[8] = F[4](S[8]);
S[9] = A[1] * 1.7391691903345654 + 1.1352139125994123;
A[9] = F[5](S[9]);
S[10] = A[9] * 1.2674932504322491 + -0.12136632663724334;
A[10] = F[6](S[10]);
S[11] = A[8] * 1.2213746545079767 + A[2] * -2.709340412309863 + -0.6658058265495477;
A[11] = F[1](S[11]);
S[12] = A[11] * -4.734649175013443 + A[6] * 2.388920669263982 + -0.7933474562031217;
A[12] = F[7](S[12]);
S[13] = A[12] * 6.2035529303294314 + A[10] * 0.2624640184117556 + A[9] * -0.20233773933641508 + A[8] * -0.16503569753069391 + A[0] * 1.7611715535121204 + 0.21569403042388724;
A[13] = F[8](S[13]);
S[14] = A[3] * -1.598339212607836 + A[2] * 0.07534447601449668 + A[1] * 8.300925929935984 + 0.3979168944180017;
A[14] = F[8](S[14]);
return [A[13],A[14]];
}var network = {activate};